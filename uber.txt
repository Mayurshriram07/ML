import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats

df = pd.read_csv('/content/uber.csv')
df.head(10)

df.dropna(inplace=True)

numeric_columns = ['fare_amount', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count']
# Create subplots for each numeric column
plt.figure(figsize=(12, 8))
for i, col in enumerate(numeric_columns, 1):
    plt.subplot(2, 3, i) # 2 rows, 3 columns of subplots
    sns.boxplot(x=df[col])
    plt.title(f'Boxplot of {col}')
plt.tight_layout()
plt.show()

z_scores = np.abs(stats.zscore(df[numeric_columns]))
threshold = 3
outlier_indices = np.where(z_scores > threshold)
data = df.drop(df.index[outlier_indices[0]])
data

X = data[['pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count']]
y = data['fare_amount']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

correlation_matrix = df.corr(numeric_only=True)
print(correlation_matrix['fare_amount'])

plt.figure(figsize=(8, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

linear_reg = LinearRegression()
linear_reg.fit(X_train, y_train)

linear_reg_predictions = linear_reg.predict(X_test)

linear_reg_r2 = r2_score(y_test, linear_reg_predictions)
linear_reg_rmse = np.sqrt(mean_squared_error(y_test, linear_reg_predictions))

print("Linear Regression R^2 Score:", linear_reg_r2)
print("Linear Regression RMSE:", linear_reg_rmse)

rf_reg = RandomForestRegressor(n_estimators=50, random_state=4)
rf_reg.fit(X_train, y_train)
rf_reg_predictions = rf_reg.predict(X_test)
rf_reg_r2 = r2_score(y_test, rf_reg_predictions)
rf_reg_rmse = np.sqrt(mean_squared_error(y_test, rf_reg_predictions))
print("Random Forest Regression R^2 Score:", rf_reg_r2)
print("Random Forest Regression RMSE:", rf_reg_rmse)
